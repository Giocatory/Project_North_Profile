from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, BotCommand
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from keyboards import services, create_inline_keyboard, create_reply_keyboard, create_correction_keyboard, create_correction_keyboard_final
from func_base import online_consultant, user_question, generate_client_report, refine_client_report, generate_presentation, generate_offer, user_objection_router, user_objection_close, save_to_table
from knowledge_base import create_db_index, load_db_index
import logging
import os
from datetime import datetime

router = Router()

class SaleState(StatesGroup):
    select_service = State()     # –≤—ã–±–æ—Ä —É—Å–ª—É–≥–∏
    gather_details = State()     # —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    confirm_info = State()       # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    correct_info = State()       # –≤—ã–±–æ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    correction =  State()         # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    consultant = State()         # —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
    contact = State()            # –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    contact_name = State()       # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    contact_mail = State()       # –í–≤–æ–¥ –ø–æ—á—Ç—ã
    custom_request = State()     # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É—Å–ª—É–≥
    final_confirm = State()      # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    additional_questions = State() # —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç gpt
    final_correction = State()     # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    finalize = State()             # –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–º–µ—Ä
    address = State()             # –ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞
    measurement_date = State()    # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∑–∞–º–µ—Ä–∞


# –ï—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞:
if not os.path.exists('db_index.faiss'):
    create_db_index(os.getenv("DATA_DOC_URL"))
    logging.info(f"create_db_index() - OK")
db_index = load_db_index('db_index')

# –ú–µ–Ω—é –±–æ—Ç–∞
@router.startup()  # –î–µ–π—Å—Ç–≤–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def on_startup(bot: Bot):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
    main_menu_commands = [
        BotCommand(command='start', description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command='clear_history', description="–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
   ]   
    await bot.set_my_commands(main_menu_commands)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def cmd_start(message: Message, state: FSMContext):
# –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    # await clear_memory(message.from_user.id)
    greeting_message = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä\n"
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–µ–π—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É—Å–ª—É–≥–∞–º –ø—Ä–æ–¥–∞–∂–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã—Ö –æ–∫–æ–Ω!\n\n"
        "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ: –æ—Ç –≤—ã–±–æ—Ä–∞ –¥–æ —Ä–∞–±–æ—Ç—ã –∑–∞–º–µ—Ä—â–∏–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
    )
    await message.answer(greeting_message, reply_markup=await create_reply_keyboard())

# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
@router.message(Command('clear_history'))
async def clear_chat_history(message: Message, state: FSMContext):
    await state.clear()  # –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(consultant_history=[])  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.", reply_markup=await create_reply_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–ø–∫–∏ "–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"
@router.message(F.text == "–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
async def start_consultant(message: Message, state: FSMContext):
    await state.clear() 
    await message.answer("–Ø - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ '–°–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –µ–µ —É—Å–ª—É–≥–∞—Ö ")
    await state.set_state(SaleState.consultant) # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"
@router.message(SaleState.consultant)
async def consultant(message: Message, state: FSMContext):
    if message.text.lower() == "—Å—Ç–æ–ø":
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
        await state.clear()
        return
      # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
    if message.text == "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∫–æ–º–ø–∞–Ω–∏–∏":
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await request_contact_data(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        return
    if message.text == "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É":
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await get_service(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        return
       # –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É
    data = await state.get_data()
    chat_history = data.get("consultant_history", [])  # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    chat_history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}") # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    response = await online_consultant(message.text, chat_history, db_index) # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    chat_history.append(f"–ë–æ—Ç: {response}") # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    await state.update_data(consultant_history=chat_history) # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await message.answer(response, reply_markup=await create_reply_keyboard()) # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É
@router.message(F.text == "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∫–æ–º–ø–∞–Ω–∏–∏")
async def request_contact_data(message: Message, state: FSMContext):
    await state.clear() 
    await state.set_state(SaleState.contact_name)
    await message.answer("–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
@router.message(SaleState.contact_name)
async def get_contact_name(message: Message, state: FSMContext):
    if message.text.strip() == "—Å—Ç–æ–ø":
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
        await state.clear()
        return
    contact_name = message.text.strip()
    if not contact_name.isalpha():
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
    await state.update_data(contact_name_user=contact_name)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {contact_name}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(SaleState.contact)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö(–Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
@router.message(SaleState.contact)
async def get_contact_info(message: Message, state: FSMContext):
    if message.text == "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É":
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await get_service(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        return
    if message.text.strip() == "—Å—Ç–æ–ø":
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
        await state.clear()
        return
    contact_phone = message.text.strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ 
    if not contact_phone.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return
    if len(contact_phone) < 10 or len(contact_phone) > 15:
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(contact_phone_user=contact_phone)
    await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email
    await state.set_state(SaleState.contact_mail)  

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö(—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã)
@router.message(SaleState.contact_mail)
async def get_email(message: Message, state: FSMContext):
        if message.text == "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É":
          await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          await get_service(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
          return
        if message.text.strip() == "—Å—Ç–æ–ø":
          await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
          await state.clear()
          return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
        contact_email = message.text.strip()
        await state.update_data(contact_email_user=contact_email)
        contact_email = message.text.strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if "@" not in contact_email or "." not in contact_email:
           await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, user@example.com).")
           return
         # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        selected_service = data.get("selected_service")
         # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å
        if selected_service and selected_service != "–°–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç":
          await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–º–µ—Ä–∞:")
          await state.set_state(SaleState.address)
          return
        contact_phone = data.get('contact_phone_user')  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        contact_name = data.get('contact_name_user')  # –ò–∑–≤–ª–µ–∫–∞–µ–º
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await message.answer(
        f"–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {contact_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact_phone}\n"
        f"Email: {contact_email}\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. –ú–æ–∂–µ—Ç–µ –≤—ã–±–µ—Ä–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",  reply_markup=await create_reply_keyboard())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        await save_to_table(state)
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
@router.message(F.text == "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É")
async def get_service(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    await message.answer("""–Ø –∑–∞–¥–∞–º –í–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, 
    —á—Ç–æ–±—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.""")
    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup = create_inline_keyboard(services))
    await state.set_state(SaleState.select_service)
    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
@router.callback_query(F.data.startswith("service_"))
async def handle_service_choice(callback_query: CallbackQuery, state: FSMContext):
    service_index = int(callback_query.data.split("_")[1]) - 1
    service_name = services[service_index]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É—Å–ª—É–≥–∏
    await state.update_data(selected_service=service_name)
    await callback_query.message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, —É—Å–ª—É–≥–∞ '{service_name}' –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!")
    data = await state.get_data()
    if data.get('selected_service') == "–°–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç":
           # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ "–°–≤–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç" -> —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.set_state(SaleState.custom_request)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        await callback_query.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
        return
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥—Ä—É–≥–∞—è —É—Å–ª—É–≥–∞ -> –∑–∞–¥–∞—ë–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    await state.set_state(SaleState.gather_details)
    await ask_next_question(callback_query.message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É—Å–ª—É–≥–∏
@router.message(SaleState.custom_request)
async def get_custom_request(message: Message, state: FSMContext):
    user_request = message.text.strip()
    await state.update_data(custom_request=user_request)
    # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º)
    await state.set_state(SaleState.contact_name)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏. \n –í–∞—à–µ –∏–º—è: ")


# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
questions = [
    "–î–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–º–µ—â–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω—ã —É—Å–ª—É–≥–∏: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º, –æ—Ñ–∏—Å, –±–∞–ª–∫–æ–Ω –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?",
    "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞–π–æ–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç, –≥–¥–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—ã?",
    "–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –∑–∞–∫–∞–∑ –∫–∞–∫ —á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ –∏–ª–∏ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏?", 
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –æ–∫–Ω–∞–º/–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º/—Ä–∞–±–æ—Ç–∞–º?"
]
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
async def ask_next_question(message: Message, state: FSMContext):
    data = await state.get_data()
    current = data.get("current_question", 0)
    if current < len(questions):
        await message.answer(questions[current])
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await summarize_and_confirm(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
@router.message(SaleState.gather_details)
async def gather_details(message: Message, state: FSMContext):
    data = await state.get_data()
    current = data.get("current_question", 0)
    answers = data.get("answers", {})
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers[str(current)] = message.text.strip()
    await state.update_data(answers=answers, current_question=current + 1)
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await ask_next_question(message, state)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def summarize_and_confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", {})
    field_names = {
        "0": "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞",
        "1": "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        "2": "–í—ã (—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ/–∫–æ–º–ø–∞–Ω–∏—è)",
        "3": "–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
    }
    summary_lines = [f"<b>–£—Å–ª—É–≥–∞:</b> {data.get('selected_service', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"]
    for key, field in field_names.items():
        answer = answers.get(key, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        summary_lines.append(f"<b>{field}:</b> {answer}")
    summary = "\n".join(summary_lines)
    await state.update_data(summary=summary)
    await message.answer("–í–æ—Ç —Å–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + summary, parse_mode="HTML")
    await message.answer("–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–æ–∫'. "
                         "–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' ")
    await state.set_state(SaleState.confirm_info)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(SaleState.confirm_info)
async def confirm_handler(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if text in ("–¥–∞", "–æ–∫", "ok"):
        await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ.")
        data = await state.get_data()
        selected_scenario = data.get("selected_service", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
        gathered_info = data.get("summary", {})  # –ë–µ—Ä—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        await message.answer("–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å—ã: ...")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        questions = await user_question(selected_scenario, gathered_info)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ `state`
        await state.update_data(additional_questions=questions, current_question=0)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        await state.set_state(SaleState.additional_questions)
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
        await ask_next_scenario_question(message, state)
    elif text == "–Ω–µ—Ç":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:", reply_markup=create_correction_keyboard())
        await state.set_state(SaleState.correct_info)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@router.callback_query(F.data.startswith("edit_"))
async def edit_field_choice(callback_query: CallbackQuery, state: FSMContext):
    field_key = callback_query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–ª—è
    field_names = {
        "0": "–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞",
        "1": "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        "2": "–í—ã (—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ/–∫–æ–º–ø–∞–Ω–∏—è)",
        "3": "–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
    }
    field_name = field_names[field_key]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
    await state.update_data(editing_field=field_key)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{field_name}':")
    await state.set_state(SaleState.correction)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@router.message(SaleState.correction)
async def update_corrected_info(message: Message, state: FSMContext):
    new_value = message.text.strip()
    data = await state.get_data()
    field_key = data.get("editing_field")  # –ü–æ–ª—É—á–∞–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
    if field_key is None:
        await message.answer("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.")
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    answers = data.get("answers", {})
    answers[field_key] = new_value
    await state.update_data(answers=answers, editing_field=None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await message.answer(f"–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ' , –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ.",
                         reply_markup=create_correction_keyboard())
    await state.set_state(SaleState.correct_info)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
@router.callback_query(F.data == "done_editing")
async def finish_editing(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    await summarize_and_confirm(callback_query.message, state)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç gpt
async def ask_next_scenario_question(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data.get("additional_questions", [])
    current = data.get("current_question", 0)
    if current < len(questions):
        await message.answer(questions[current])  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    else:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í—Å–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã! –î–∞–≤–∞–π—Ç–µ —Å–≤–µ—Ä–∏–º")
        await summarize_final_info(message, state)
        #await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç gpt      
@router.message(SaleState.additional_questions)
async def handle_scenario_answers(message: Message, state: FSMContext):
    data = await state.get_data()
    current = data.get("current_question", 0)
    additional_answers = data.get("additional_answers", {})
    additional_answers[str(current)] = message.text.strip()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    # –û–±–Ω–æ–≤–ª—è–µ–º `state`
    await state.update_data(additional_answers=additional_answers, current_question=current + 1)
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await ask_next_scenario_question(message, state)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
async def summarize_final_info(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    data = await state.get_data()
    additional_answers = data.get("additional_answers", {})
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = await generate_client_report(additional_answers, gathered_info=None)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(final_report=report)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary_lines = [
        f"<b>–£—Å–ª—É–≥–∞:</b> {data.get('selected_service', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
        "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è:</b>",
        report
    ]
    summary = "\n".join(summary_lines)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"–í–æ—Ç –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ:\n{summary}", parse_mode="HTML")
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –≤–Ω–µ—Å–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=create_correction_keyboard_final())
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await state.set_state(SaleState.final_confirm)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
@router.callback_query(F.data == "final_confirm")
async def handle_final_confirmation(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏."""
    data = await state.get_data()
    final_report = data.get("final_report", {})
    gathered_info = data.get("summary", {}) 
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏ –æ—Ç—á–µ—Ç–∞
    summary_report = f"{gathered_info}\n{final_report}\n"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    await callback_query.message.answer(f"<b>–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö:</b>\n{summary_report}", parse_mode="HTML")
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –≥–æ—Ç–æ–≤ –≤–∞–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–≤–æ–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –≤–∞—Å!")
    presentation = await generate_presentation(db_index, summary_report)
    offer = await generate_offer(db_index, summary_report)
    await state.update_data(offer=offer)
    await callback_query.message.answer(f"{presentation} \n\n {offer} ")
    await state.set_state(SaleState.finalize)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞/—Ö–æ—Ä–æ—à–æ/–ø–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–æ–º–Ω–µ–Ω–∏—è—Ö")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"
@router.callback_query(F.data == "final_edit")
async def ask_for_correction(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏."""
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç—á—ë—Ç–µ.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: \"–î–æ–±–∞–≤—å—Ç–µ –≤—ã–≤–æ–∑ —Å—Ç–∞—Ä—ã—Ö –æ–∫–æ–Ω.\""
    )
    await state.set_state(SaleState.final_correction)


# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
@router.message(SaleState.final_correction)
async def handle_final_correction(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç."""
    correction = message.text.strip()
    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç
    data = await state.get_data()
    previous_report = data.get("final_report", {})
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å —É—á—ë—Ç–æ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    updated_report = await refine_client_report(previous_report, correction)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
    await state.update_data(final_report=updated_report)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
    await message.answer(
        f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ—Ç—á—ë—Ç —Å —É—á—ë—Ç–æ–º –≤–∞—à–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n{updated_report}",
        parse_mode="HTML"
    )
    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –≤–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç –∏–ª–∏ –≤–Ω–µ—Å–∏—Ç–µ –µ—â—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=create_correction_keyboard_final()
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(SaleState.finalize)
async def record_measurement_to_excel(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_history = data.get("consultant_history", [])  # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    offer = data.get("offer", [])
    text = message.text.strip().lower()
    if text in ("–¥–∞", "–æ–∫", "ok", "–≥–æ—Ç–æ–≤–∞", "–∑–∞–ø–∏—à–∏—Ç–µ", "—Ö–æ—Ä–æ—à–æ", ):
        await message.answer("""–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑. –ü–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π 
            —Å–≤—è–∑–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: """)
        await state.set_state(SaleState.contact_name)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        return
    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤—ã—Ä–∞–∂–∞–µ—Ç —Å–æ–º–Ω–µ–Ω–∏—è –∏–ª–∏ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å
    else:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π
        objection = await user_objection_router(text)
        if objection != "‚àí":  # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à–∏ —Å–æ–º–Ω–µ–Ω–∏—è.")
            chat_history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}")
            objection_response = await user_objection_close(db_index, offer, objection)  # –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ
            await message.answer(objection_response)
            chat_history.append(f"–ë–æ—Ç: {objection_response}")
            await state.set_state(SaleState.finalize)  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –°–µ–π—á–∞—Å —è –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–º—É –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.")
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            chat_history.append(f"–ë–æ—Ç: {offer}")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä –≤ –∏—Å—Ç–æ—Ä–∏—é
            chat_history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text}")
            response = await online_consultant(objection, chat_history, db_index)
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            chat_history.append(f"–ë–æ—Ç: {response}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(consultant_history=chat_history)
            await message.answer(response)
            await message.answer(f'–ò—Ç–∞–∫, –≤–µ—Ä–Ω–µ–º—Å—è –∫ –Ω–∞—à–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é: {offer} \n\n –í–≤–µ–¥–∏—Ç–µ –¥–∞/—Ö–æ—Ä–æ—à–æ/–ø–æ–¥—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–æ–º–Ω–µ–Ω–∏—è—Ö')
            await state.set_state(SaleState.finalize)  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏  



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö(–∞–¥—Ä–µ—Å–∞)
@router.message(SaleState.address)
async def get_address(message: Message, state: FSMContext):
    if message.text == "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É":
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await get_service(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        return
    if message.text.strip() == "—Å—Ç–æ–ø":
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
        await state.clear()
        return
    address = message.text.strip()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
    await state.update_data(address=address)
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–º–µ—Ä–∞
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∑–∞–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD-MM-YYYY':")
    await state.set_state(SaleState.measurement_date)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞—Ç—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞–º–µ—Ä–∞
@router.message(SaleState.measurement_date)
async def get_measurement_date(message: Message, state: FSMContext):
    if message.text == "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É":
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await get_service(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        return
    if message.text.strip() == "—Å—Ç–æ–ø":
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!")
        await state.clear()
        return
    measurement_date = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'YYYY-MM-DD')
    try:
       datetime.strptime(measurement_date, '%d-%m-%Y')
    except ValueError:
       await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD-MM-YYYY'.")
       return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∑–∞–º–µ—Ä–∞
    await state.update_data(measurement_date=measurement_date)
    # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ —Ç–∞–±–ª–∏—Ü—É
    await message.answer(
        f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"–£—Å–ª—É–≥–∞: {data.get('selected_service')} "
        f"–ò–º—è: {data.get('contact_name_user')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('contact_phone_user')}\n"
        f"Email: {data.get('contact_email_user')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"–î–∞—Ç–∞ –∑–∞–º–µ—Ä–∞: {data.get('measurement_date')}\n\n"
        "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!",
        reply_markup=await create_reply_keyboard()
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    await save_to_table(state)
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
            


