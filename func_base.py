
from knowledge_base import create_db_index, load_db_index
import logging
import os
import re
from dotenv import load_dotenv
import pandas as pd
from openai import AsyncOpenAI
from aiogram.fsm.context import FSMContext


load_dotenv()

# Если векторная база еще не создана:
if not os.path.exists('db_index.faiss'):
    create_db_index(os.getenv("DATA_DOC_URL"))
    logging.info(f"create_db_index() - OK")
db_index = load_db_index('db_index')


#Функция для получения ответа от онлайн-консультанта.
async def online_consultant(topic, chat_history, db, temp=0.15, k=3, model="gpt-4o-mini"):
    system = '''Вы — профессиональный онлайн-консультант компании, специализирующейся на установке и ремонте окон, 
    а также остеклении балконов и лоджий "Северный профиль".
Ваша основная задача — отвечать кратко, точно и по существу на вопросы клиентов.
Вы используете только предоставленную информацию из базы знаний компании.

Основные обязанности:
1. Давать корректные ответы, основываясь на продуктах, услугах и преимуществах компании.
2. Не разглашать, что используете базу знаний, и не упоминать ее в ответах.
3. Соблюдать профессиональный, дружелюбный и уверенный стиль общения.
4. Если вопрос клиента не связан с услугами компании, вежливо отказывать в ответе.

Запрещено:
- Предлагать услуги или курсы, если клиент этого не запрашивал.
- Давать ответы, не подтвержденные информацией из базы знаний и инструкций, данных тебе.
- Здороваться или повторяться в каждом сообщении.

Цель: Помогать клиенту получать точную информацию, разобраться в его вопросе и создавать положительное впечатление о компании. 
Учтите все возможные нюансы, и подчеркните преимущества нашей компании.'''
    instruction = '''Проанализируйте запрос клиента и ответьте кратко, точно и понятно, используя информацию из базы знаний 
    компании на вопрос клиента.
Стиль ответа:
- Уверенный и профессиональный.
- Поддерживающий, чтобы клиент чувствовал, что его запрос важен.
Если ты не нашел информацию для ответа в данном тебе документе или инструкции,то предложите переформулировать вопрос.
Ты четко следуешь инструкции'''
    # Поиск документов, похожих на заданную тему/вопрос
    docs = db.similarity_search(topic, k=k)
    # Создание содержимого сообщения, объединяя текст найденных документов
    message_content = re.sub(r'\r\n', ' ', '\n '.join([f'\n-------------\n' + doc.page_content + '\n' for i, doc in enumerate(docs)]))
    # Формирование полный контекст разговора
    context = "\n".join(chat_history[-10:])  # Ограничиваем историю последними 10 сообщениями
    # Формирование сообщений для модели
    messages = [
        {"role": "system", "content": system},
        {"role": "user", "content": f"{instruction}.\n{message_content}.\n\nИстория диалога:\n{context}\n\nВопрос:\n{topic}\n\nОтвет:"}
    ]
    # Создание запроса к модели OpenAI
    completion = await AsyncOpenAI().chat.completions.create(
        model=model,  # Имя модели
        messages=messages,  # Сообщения для модели
        temperature=temp  # Температура генерации
    )
    # Получение ответа от модели
    return completion.choices[0].message.content


# Генерация уточняющих вопросов для клиента на основе выбранного сценария и собранной информации.
async def user_question(selected_scenario, gathered_info):
    """
    Args:
        selected_scenario(str): название выбранного сценария
        gathered_info (dict): Собранная информация на предыдущем этапе.
    Returns:
        questions(str): Список с вопросами 
    """
    # Сопоставление сценариев с ключевыми фразами
    scenario_keywords = {
    "Подбор и установка новых окон": [
        "тип помещения", "материал окон", "количество створок", "цвет окон", "бюджет", "сроки установки",
        "дополнительные функции", "энергосбережение", "звукоизоляция", "габариты окон"
    ],
    "Ремонт существующих окон/замена стеклопакетов": [
        "проблема с окнами", "тип ремонта", "замена стеклопакетов", "ремонт фурнитуры", "замена уплотнителей",
        "регулировка створок", "сроки ремонта", "стоимость ремонта", "причина поломки", "регулировка фурнитуры", "смазка механизмов", 
        "чистка окон", "замена уплотнителей", "диагностика проблем"
    ],
    "Остекление/утепление балконов и лоджий": [
        "тип балкона", "материал остекления", "утепление стен", "утепление пола", "тип утеплителя",
        "остекление с выносом", "остекление без выноса", "дополнительные работы", "бюджет", "сроки"
    ],
    "Остекление веранд и беседок": [
        "тип конструкции", "материал остекления", "размеры веранды", "размеры беседки", "тип кровли",
        "дополнительные функции", "отопление", "вентиляция", "бюджет", "сроки"
    ],
    "Демонтаж старых окон": [
        "тип старых окон", "количество окон", "состояние конструкций", "демонтаж с вывозом", "демонтаж без вывоза",
        "сроки демонтажа", "дополнительные работы", "бюджет", "причина демонтажа"
    ],
    "Установка москитных сеток": [
        "тип сеток", "количество сеток", "размеры сеток", "крепление сеток", "цвет сеток",
        "дополнительные функции", "сроки установки", "бюджет", "тип окон"
    ],
    }
    # Получение ключевых фраз для сценария
    keywords = scenario_keywords.get(selected_scenario, [])
    keywords_text = ", ".join(keywords)
    # Формирование системного сообщения
    system_message = f"""Ты лучший специалист отдела продаж в компании "Северный профиль", имеющей большой опыт в изготовлении, монтаже, 
    послепродажного обслуживания и прочих работ и
     услуг компании.  Твоя цель — задать клиенту вопросы, чтобы выяснить его потребности и ожидания и предложить лучшее решение.
     Ты продаешь услуги и работы по установке окон, ремонту, демонтаже, остеклению, утеплению, сервису и прочим мелким улугам по пластиковым окнам.
     Ты понимаешь, что потребности клиента в этом контексте: в выборе окон, остеклении балконов, улучшении теплоизоляции и другие.
     Ты знаешь, что важно выявить, хочет ли клиент панорамные окна, энергосберегающие технологии, или решение для детей, и другие параметры.
     Ты всегда задаешь вопросы, чтобы точно понять запрос клиента, его предпочтения и ожидания.
     Всегда уточняй детали.
     Если Клиент планирует Демонтаж старых окон, то строго генерируй вопросы только на эту тему.
     Когда все потребности клиента выяснены, заверши диалог, сообщив, что у тебя есть вся необходимая информация для предложения.
     Давай действовать последовательно:
     - Проанализируй все данные, собранные ранее от Клиента.
     - Проанализируй сценарий и ключевые фразы по нему.
     - Сформулируй уточняющие вопросы, чтобы выяснить детали потребностей клиента в этом сценарии.
     - Выяви потребности и ожидания Клиента по предстоящей услуге/работе.
     - Генерируй вопросы до того момента как только поймешь, что все потребности и желания будут выяснены и Клиенту можно уже презентовать 
     продукт/услугу/работу, саму компанию и опыт. Пользуйся для генерации вопросов ключевыми словами, данными тебе, но и добавляй собственные 
     вопросы, подходящие к сценарию.
     Не называй Клиента Клиентом.
     """
    # Формирование инструкции
    user_prompt = f"""
    Сгенерируй нужное количество вопросов к Клиенту. Вот данные, которые понадобятся тебе для предварительного анализа и генерации вопросов:
    Сценарий: {selected_scenario}.
    Ключевые фразы по сценарию: {keywords_text}
    Уже собранная информация от Клиента: {gathered_info}.
    Не повторяй вопросы о том, что уже известно, а вместо этого сосредоточься на новых деталях.
    """
    # Запрос к модели
    messages = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": user_prompt}
    ]
    completion = await AsyncOpenAI().chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.15
    )
   # Получение списка вопросов
    raw_questions = completion.choices[0].message.content.strip().split("\n")
    # Фильтрация: Убираем лишние строки, оставляем только вопросы
    filtered_questions = [q.strip() for q in raw_questions if q.strip() and (q.strip().startswith("1.") or q.strip()[0].isdigit())]
    # Корректируем нумерацию
    questions = [q.split(". ", 1)[-1] for q in filtered_questions]  # Убираем текущие номера
    questions = [f"{i+1}. {q}" for i, q in enumerate(questions)]  # Применяем новую нумерацию
    return questions



async def generate_client_report(answers, gathered_info):
    """
    Генерирует структурированный отчёт о потребностях клиента.
    Args:
        answers (dict): Уточнённые ответы клиента.
        gathered_info (dict): Первичные данные клиента.
    Returns:
        str: Структурированный отчёт.
    """
    # Запрос в модель
    completion = await AsyncOpenAI().chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.1,
        messages=[
            {"role": "system", "content": """Ты опытный специалист отдела продаж.
Твоя задача — анализировать потребности клиентов в сфере установки и ремонта окон, остекления балконов и других связанных услуг.
Ты точно формулируешь основные потребности клиента на основе его истории запросов и ответов. 
Потребности должны быть перечислены чётко и структурированно."""},
            {"role": "user", "content": f'''Сформируй отчёт о потребностях клиента на основе следующей информации:
История запросов: {answers}. Первичная собранная информация: {gathered_info}. 
Формируй отчет в стиле маркдаун. Выводи только текст отчёта. 
Пример требуемой структуры отчета:
- Тип окон: энергосберегающие окна для детской комнаты.
- Особенности: панорамное остекление для увеличения света.
- Дополнительно: утепление и отделка балкона.
- ...
'''
            }],
    )
    return completion.choices[0].message.content.strip()


# Функция  доработки отчета на основе уточнений клиента.
async def refine_client_report(previous_report, correction):
    """
    Вносит исправления в отчёт клиента, сохраняя его структуру.
    Args:
        previous_report (str): Исходный отчёт.
        correction (str): Исправления клиента.
    Returns:
        str: Обновлённый отчёт.
    """
    completion = await AsyncOpenAI().chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": """Ты специалист отдела продаж и отлично корректируешь отчёты.
            Твоя задача — ВСТРАИВАТЬ корректировки и замечания клиента в отчёт, тем самым улучшать отчеты на основе обратной связи клиента,
            СОХРАНЯЯ всю структуру. 
            Ты НЕ должен удалять существующую информацию или изменять её без причины.
            Работай с текстом максимально чётко, чтобы учесть изменения, указанные клиентом"""},
            {"role": "user", "content": f'''Вот текущий отчёт о потребностях клиента:
            {previous_report}
            Клиент просит внести следующие корректировки:
            {correction}
            Сформируй обновленный отчет, учтя изменения клиента, но не меняя формат отчета.
            Выводите только текст обновленного отчета'''}
        ],
        temperature=0.1
    )
    return completion.choices[0].message.content.strip()


# Генерация презентации компании на основе базы знаний и потребностях.
async def generate_presentation(db, summary_report):
    """
      db - векторная база знаний
      summary_report - итоговые выявленные потребности клиента, собранные в процессе взаимодействия с ним
    Returns:
       presentation - сгенерированная моделью презентация компании и ее услуг на основе БЗ и потребностей клиента
    """
    base = db.similarity_search(summary_report, k=5)
    docs_content = re.sub(r'\n{2}', ' ', '\n '.join([f'\n======\n' + doc.page_content + '\n' for doc in base]))
    # Используем ключевые данные из базы знаний
    completion = await AsyncOpenAI().chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": """Вы опытный маркетолог и лучший специалист по презентации услуг и продуктов компании, которая занимается установкой и ремонтом окон, остеклением балконов,
            лоджий, веранд и беседок, сервисным обслуживанием, а также другими мелкими услугами и работами в сфере пластиковых окон.
            Ваша задача — на основе базы знаний компании сформулировать сильную презентацию преимуществ компании для клиента. Ваш стиль общения доброжелательный, уверенный, позитивный и пробуждающий к действиям.
            Ваша цель — сделать убедительную, качественную и краткую презентацию, опираясь на особенности компании и потребности клиента.
            Запрещено делать какие-либо предложения клиенту, твоя задача только презентовать продукт/услугу/компанию.
            Презентации всегда:
           - Фокусируются на преимуществах компании и продуктах, но формулируются так, чтобы клиент видел выгоды для себя.
           - Основаны на реальных преимуществах компании: скорость выполнения работ, немецкое качество, акции и гарантии.
           - Основаны на реальных историях об опыте и проффеонализме компании.
           - Рассказываетя о технологиях и качестве, примерах успешных кейсов и проектов (при наличии).
           - Учитывают потребности клиента, не упоминая их явно (например, если клиенту важно утепление, делаете акцент на теплоизоляции).
           - Рассказывается о гарантиях и дополнительных услугах.
           - Выстраиваются индивидуально, избегая шаблонных и "скриптовых" ответов."""},

            {"role": "user", "content": f'''Сформируйте краткую, убедительную и качественную презентацию, ориентированную на потребности 
            клиента: {summary_report}, используя предоставленную информацию
            о компании на основе базы знаний: {docs_content}.
            При составлении презентации используйте следующие данные:
            1. Преимущества компании
            2. Особенности клиента
            3. Не здоровайся и не пиши "Спасибо за внимание"
            Сделайте текст кратким, но четким и с акцентом на выгоды клиента. Выводи только текст презентации.
            '''}
        ],
        temperature=0.15
    )
    # Получаем текст презентации
    return completion.choices[0].message.content
    

# @title Генерация оффера на основе базы знаний и потребностей клиента.
async def generate_offer(db, summary_report):
    """
      db - векторная база знаний
      summary_report - итоговые выявленные потребности клиента, собранные в процессе взаимодействия с ним
    Returns:
       offer - сгенерированный моделью оффер клиенту на основе БЗ и его потребностей
    """
    base = db.similarity_search(summary_report, k=5)
    docs_content = re.sub(r'\n{2}', ' ', '\n '.join([f'\n==================\n' + doc.page_content + '\n' for doc in base]))
    # Генерация персонализированного предложения
    completion = await AsyncOpenAI().chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": """Вы — эксперт по составлению коммерческих предложений, работающий с клиентами компании "Северный профиль", занимающейся услугами и работами в сфере пластиковых окон.
            Ваша задача — на основе базы знаний компании и потребностей клиента сформировать персонализированное привлекательное предложение, которое побуждает клиента действовать.
            Ваша цель: убедить клиента перейти к следующему шагу — согласовать встречу, замеры или уточнить детали.
            Учитывай:
            - Потребности клиента.
            - Текущие акции и скидки.
            - Уникальные технологии компании.
            Особенности:
            - Основой предложения всегда являются выгоды, которые клиент получит.
            - Предложение краткое и конкретное, без воды.
            - Если есть активные акции или скидки, они должны быть четко упомянуты.
            Ваш стиль:
            - Уверенный, но ненавязчивый.
            - Легкий акцент на ограниченности акции, чтобы мотивировать клиента.
            - В конце своего оффера уточняй у клиента устраивает ли его такое предложение и готов ли он записаться на замер или консультацию. Иные вопросы задавать запрещено.
            ЗАПРЕЩЕНО:
            - здороваться
            - уточнять дополнительные детали
            """},

            {"role": "user", "content": f'''На основе базы знаний:
            {docs_content}
            и потребностей клиента:
            {summary_report},
            сформируй персонализированное предложение, ориентированное на потребности клиента, и включите активные акции или бонусы. Выводи только текст предложения.
            Примерный стиль ответа:
            "Мы можем установить для вас энергосберегающие окна за 3 дня. Благодаря технологии 'Теплый контур', в вашем доме всегда будет тепло. Сейчас действует акция: бесплатный замер и скидка
            10% при заказе в течение недели. Рассрочка на 12 месяцев — без переплат. Устраивает ли вас такой вариант?"
            '''}
        ],
        temperature=0.1
    )
    # Получаем текст оффера
    return completion.choices[0].message.content


# Функция обнаружения возражений
async def user_objection_router(topic):
  """
  topic (str)- Сообщение клиента, которое нужно проанализировать на наличие возражений
  Returns:
  user_objection(str): перечисление возражений, если они есть. Если возражений нет, возвращается "−"
  """
# Добавляем найденные данные в инструкцию
  completion = await AsyncOpenAI().chat.completions.create(
    model="gpt-4o-mini",
    temperature=0.15,
    messages = [
        {"role": "system", "content": """Вы опытный специалист отдела продаж. Ваша задача — анализировать диалоги с клиентами и выделять из них открытые возражения.
Открытое возражение — это четкое заявление клиента о том, что его не устраивает и что может быть препятствием для дальнейшего взаимодействия.
Вы должны:
1. Определить наличие возражений.
2. Указать все выделенные возражения по порядку, в котором они были высказаны клиентом, с целью передачи в отработку.
3. Если возражений нет, написать "−".
Примеры возражений: "слишком дорого", "Мне не хватит времени", "Я не уверен, что это то,что мне нужно" и прочее.
Важно: ничего не придумывайте от себя, выделяйте только то, что явно высказано клиентом, выделив суть возражения"""},
        {"role": "user", "content": f'''Проанализируйте сообщение клиента и укажите открытые возражения.
Если возражения найдены, перечислите их через запятую. Если возражений нет, напишите "−".
Соблюдайте строгую последовательность:
1. Читайте сообщение клиента.
2. Определите открытые возражения (если есть).
3. Выведите результат в виде строки.
\nВопрос менеджера и ответ клиента:\n{topic}.
\nОтвет: '''}
    ] )
# Взаимодействие с моделью для получения возражений
  return completion.choices[0].message.content


# Функция отработки возражений
async def user_objection_close(db, offer, user_objection):
    """
    db - векторная база данных
    user_objection(str): возражение, обнаруженно с помощью предыдущей функции
    Returns:
    answer(str): ответ модели по отработке возражения
    """
    knowledge_base = db.similarity_search(user_objection, k=4)  # Поиск релевантных документов
    docs_content = "\n".join([doc.page_content for doc in knowledge_base])
    completion =  await AsyncOpenAI().chat.completions.create(
    model="gpt-4o-mini",
    temperature=0.15,
    messages = [
    {"role": "system", "content": """Вы опытный специалист по отработке возражений. Ваша задача — убедительно, аргументированно и ненавязчиво работать с возражениями клиентов.
Цель: помочь клиенту преодолеть сомнения, показав, как ваши услуги или продукты решают его потребности.
Ключевые правила:
1. Аргументация должна быть основана на реальных фактах, акциях или преимуществах компании.
2. Стиль общения — доброжелательный, уверенный, мотивирующий, дружелюбный
3. Убеждайте клиента без давления, делая акцент на выгодах.
4. Учитывайте возможные психологические барьеры клиента.
Ваша задача — предложить качественное решение или аргумент, который закрывает возражение."""},

    {"role": "user", "content": f'''Проанализируйте возражение клиента и напишите убедительную отработку.
Соблюдайте последовательность:
1. Ознакомьтесь с возражением клиента.
2. Предложите логичное и аргументированное решение.
3. В конце своего оффера уточняй у клиента устраивает ли его такое предложение и готов ли он теперь записаться на замер или консультацию. 
Иные вопросы задавать запрещено.
Выводите только текст отработки возражения.
    \nВозражение клиента: {user_objection}.
    \nРелевантные данные из базы знаний: {docs_content}.
    \nПерcональное предложение клиенту: {offer}
    '''}
    ])
    # Взаимодействие с моделью для закрытия возражений
    return completion.choices[0].message.content


# Функция сохранения данных в таблицу
async def save_to_table(state):
    # Получаем данные состояния
    data = await state.get_data()
    # Извлекаем основные контактные данные
    contact_name = data.get("contact_name_user", "")
    contact_phone = data.get("contact_phone_user", "")
    contact_email = data.get("contact_email_user", "")
    selected_service = data.get("selected_service", "Не указано")
    custom_request = data.get("custom_request", "")  # Для "Свой индивидуальный вариант"
    # Проверяем, нужно ли сохранять адрес и дату замера
    address = data.get("address", "") if selected_service != "Свой индивидуальный вариант" else ""
    measurement_date = data.get("measurement_date", "") if selected_service != "Свой индивидуальный вариант" else ""
    # Сохраняем собранные уточняющие ответы
    gathered_info = data.get("summary", "")
    additional_answers = data.get("final_report", "")
    # Формируем новую запись
    new_entry = {
        "Имя": contact_name,
        "Телефон": contact_phone,
        "Email": contact_email,
        "Выбранная услуга": selected_service,
        "Описание запроса (если свой вариант)": custom_request,
        "Адрес": address,
        "Дата замера": measurement_date,
        "Ответы на первый блок вопросов": gathered_info,
        "Ответы на второй блок уточняющих вопросов": additional_answers
    }
    output_dir = './table/'  # Используем относительный путь
    os.makedirs(output_dir, exist_ok=True)  # Создаем папку, если её нет
    file_name = os.path.join(output_dir, 'client_orders.xlsx')
    # Проверяем, существует ли файл
    if os.path.exists(file_name):
        df = pd.read_excel(file_name)
        df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)  # Добавляем новую строку
    else:
        df = pd.DataFrame([new_entry])  # Создаем новый DataFrame
    # Сохраняем файл
    df.to_excel(file_name, index=False)
    print("✅ Данные успешно сохранены в таблицу!")